[3758880, {"parent_id": 3758606, "post_type": "a", "score": 1384, "tags": "<java><formatting><apache-commons>", "code_blocks": ["    public static String humanReadableByteCountSI(long bytes) {\n        if (-1000 < bytes && bytes < 1000) {\n            return bytes + \" B\";\n        }\n        CharacterIterator ci = new StringCharacterIterator(\"kMGTPE\");\n        while (bytes <= -999_950 || bytes >= 999_950) {\n            bytes /= 1000;\n            ci.next();\n        }\n        return String.format(\"%.1f %cB\", bytes / 1000.0, ci.current());\n    }", "    public static String humanReadableByteCountBin(long bytes) {\n        long absB = bytes == Long.MIN_VALUE ? Long.MAX_VALUE : Math.abs(bytes);\n        if (absB < 1024) {\n            return bytes + \" B\";\n        }\n        long value = absB;\n        CharacterIterator ci = new StringCharacterIterator(\"KMGTPE\");\n        for (int i = 40; i >= 0 && absB > 0xfffccccccccccccL >> i; i -= 10) {\n            value >>= 10;\n            ci.next();\n        }\n        value *= Long.signum(bytes);\n        return String.format(\"%.1f %ciB\", value / 1024.0, ci.current());\n    }", "                                  SI     BINARY\n                       0:        0 B        0 B\n                      27:       27 B       27 B\n                     999:      999 B      999 B\n                    1000:     1.0 kB     1000 B\n                    1023:     1.0 kB     1023 B\n                    1024:     1.0 kB    1.0 KiB\n                    1728:     1.7 kB    1.7 KiB\n                  110592:   110.6 kB  108.0 KiB\n                 7077888:     7.1 MB    6.8 MiB\n               452984832:   453.0 MB  432.0 MiB\n             28991029248:    29.0 GB   27.0 GiB\n           1855425871872:     1.9 TB    1.7 TiB\n     9223372036854775807:     9.2 EB    8.0 EiB   (Long.MAX_VALUE)"]}]
[326440, {"parent_id": 326390, "post_type": "a", "score": 1665, "tags": "<java><string><file><file-io><io>", "code_blocks": ["    String content = Files.readString(path, StandardCharsets.US_ASCII);", "    static String readFile(String path, Charset encoding)\n      throws IOException\n    {\n      byte[] encoded = Files.readAllBytes(Paths.get(path));\n      return new String(encoded, encoding);\n    }", "    List<String> lines = Files.readAllLines(Paths.get(path), encoding);", "    try (Stream<String> lines = Files.lines(path, encoding)) {\n      lines.forEach(System.out::println);\n    }", "    String content = readFile(\"test.txt\", StandardCharsets.UTF_8);", "    String content = readFile(\"test.txt\", Charset.defaultCharset());"]}]
[326390, {"parent_id": 326390, "post_type": "q", "score": 1695, "tags": "<java><string><file><file-io><io>", "code_blocks": ["    private String readFile(String file) throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader (file));\n        String         line = null;\n        StringBuilder  stringBuilder = new StringBuilder();\n        String         ls = System.getProperty(\"line.separator\");\n        try {\n            while((line = reader.readLine()) != null) {\n                stringBuilder.append(line);\n                stringBuilder.append(ls);\n            }\n            return stringBuilder.toString();\n        } finally {\n            reader.close();\n        }\n    }"]}]
[3758653, {"parent_id": 3758606, "post_type": "a", "score": 28, "tags": "<java><formatting><apache-commons>", "code_blocks": ["    private static final long K = 1024;\n    private static final long M = K * K;\n    private static final long G = M * K;\n    private static final long T = G * K;\n    public static String convertToStringRepresentation(final long value){\n        final long[] dividers = new long[] { T, G, M, K, 1 };\n        final String[] units = new String[] { \"TB\", \"GB\", \"MB\", \"KB\", \"B\" };\n        if(value < 1)\n            throw new IllegalArgumentException(\"Invalid file size: \" + value);\n        String result = null;\n        for(int i = 0; i < dividers.length; i++){\n            final long divider = dividers[i];\n            if(value >= divider){\n                result = format(value, divider, units[i]);\n                break;\n            }\n        }\n        return result;\n    }\n    private static String format(final long value,\n        final long divider,\n        final String unit){\n        final double result =\n            divider > 1 ? (double) value / (double) divider : (double) value;\n        return new DecimalFormat(\"#,##0.#\").format(result) + \" \" + unit;\n    }", "    public static void main(final String[] args){\n        final long[] l = new long[] { 1l, 4343l, 43434334l, 3563543743l };\n        for(final long ll : l){\n            System.out.println(convertToStringRepresentation(ll));\n        }\n    }", "    1 B\n    4,2 KB\n    41,4 MB\n    3,3 GB"]}]
[6046761, {"parent_id": 3758606, "post_type": "a", "score": 9, "tags": "<java><formatting><apache-commons>", "code_blocks": ["private static final String[] Q = new String[]{\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"};\npublic String getAsString(long bytes)\n{\n for (int i = 6; i > 0; i--)\n        {\n             double step = Math.pow(1024, i);\n                if (bytes > step) return String.format(\"%3.1f %s\", bytes / step, Q[i]);\n  }\n     return Long.toString(bytes);\n}"]}]f